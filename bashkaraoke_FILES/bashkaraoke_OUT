#!/usr/bin/env bash
#
#########################
#
# Copyright (C) 2013 Vittorio Cagnetta
# Copyright (C) 2013 Davide Depau
#
# Author: Vittorio Cagnetta <vaisarger@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program, 
# called, in this distribution, "bashkaraoke-LICENSE"; if not, write to the 
# Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
#
#########################
#
##################
# ...sourcing 
# only if ${BK_VERSION_NUMBER} is empty...
FORCED_SOURCING="NO"
if [ ${#BK_VERSION_NUMBER} -eq 0 ]
	then
	FORCED_SOURCING="YES"
	start_dir="$(pwd)"
	system_bk_dir_CORE="/usr/share/bashkaraoke/bashkaraoke_FILES"
	if [ -d "${system_bk_dir_CORE}" ]
		then
		dir_CORE="${system_bk_dir_CORE}"
	else
		[ -f "${0}" ] && \
		dir_CORE="$(dirname "${0}" )"
	fi
	#
	[ ! -d "${dir_CORE}" ] && echo -e "\nErr.: var. \"\${dir_CORE}\" is empty...\n\n" && sleep 3 && exit 1
	#
	cd "${dir_CORE}"
		#
		[ ! -f "$(pwd)/bashkaraoke_COMMON" ] && echo -e "\nErr.: file \"$(pwd)/bashkaraoke_COMMON\" doesn't exist...\n\n" && sleep 3 && exit 1
		source "$(pwd)/bashkaraoke_COMMON"
		#
		[ ! -f "$(pwd)/bashkaraoke_CORE" ] && echo -e "\nErr.: file \"$(pwd)/bashkaraoke_CORE\" doesn't exist...\n\n" && sleep 3 && exit 1
		# source "$(pwd)/bashkaraoke_CORE" ( *CORE sourcing must be delayed _after_ playing parameters -es.: volume- setting)
		bkcore="$(pwd)/bashkaraoke_CORE"
		#
	cd "${start_dir}"
fi
#
: min_Volume
: default_Volume
: max_Volume
#
: min_Pitch
: default_Pitch
: max_Pitch
#
: min_Tempo
: default_Tempo
: max_Tempo
#
###################
uso()
	{
	if [ "${l}" = "IT" ] 
		then
		echo -e "Uso:>$(basename "${0}" ) <OPZIONI> \"[file MIDI]\"" 1>&2
		echo -e "\t" 1>&2
		echo -e "\tDove per <OPZIONI> si intende:" 1>&2
		echo -e "\t-o\t\t=>\te' \"modalita' di Output\":" 1>&2
		echo -e "\t\t\t\t\t( \"c\" => \"colore\" oppure \"s\" => \"stringa\" oppure \"n\" => \"numerico\" oppure \"h\" => \"html\", default = \"c\" )" 1>&2
		echo -e "\t" 1>&2
		echo -e "\t-f\t\t=>\te' \"file di output\":" 1>&2
		echo -e "\t\t\t\t\t( default = \"${dir_Karaoke}/.lyrics\" )" 1>&2
		echo -e "\t" 1>&2
		echo -e "\t-F\t\t=>\te' \"nome del font\":" 1>&2
		echo -e "\t\t\t\t\t( default = \"${font}\" )" 1>&2
		echo -e "\t" 1>&2
		echo -e "\t-v\t\t=>\te' il \"Volume\":" 1>&2
		echo -e "\t\t\t\t\t(da ${min_Volume} a ${max_Volume}, default = \"${default_Volume}\" )" 1>&2
		echo -e "\t" 1>&2
		echo -e "\t-p\t\t=>\te' il \"Tono\":" 1>&2
		echo -e "\t\t\t\t\t(da ${min_Pitch} a ${max_Pitch}, default = \"${default_Pitch}\" )" 1>&2
		echo -e "\t" 1>&2
		echo -e "\t-t\t\t=>\te' il \"Tempo\":" 1>&2
		echo -e "\t\t\t\t\t(da ${min_Tempo} a ${max_Tempo}, default = \"${default_Tempo}\" )" 1>&2
		echo -e "\t" 1>&2
		echo -e "\t-h\t\t=>\tsignifica \"help\":" 1>&2
		echo -e "\t\t\t\t\t(scrivi a schermo questo messaggio ed esci)" 1>&2
		echo -e "\t" 1>&2
		echo -e "\t-i\t\t=>\tsignifica \"informazioni\":" 1>&2
		echo -e "\t\t\t\t\t(scrivi a schermo le informazioni relative alla canzone ed esci)" 1>&2
		echo -e "\t\t\t\t\t( 1|2 argomenti: [filename] e <id>-opz.- )" 1>&2
		echo -e "\t\t\t\t\t( se anche l'id viene fornito, $(basename "${0}" ) aggiorna il db )" 1>&2
		echo -e "\t" 1>&2
		#
	elif [ "${l}" = "EN" ] 
		then
		echo -e "Usage:>$(basename "${0}" ) <OPTIONS> \"[MIDI file]\"" 1>&2
		echo -e "\t" 1>&2
		echo -e "\tWhere <OPTIONS> are:" 1>&2
		echo -e "\t-o\t\t=>\tis \"Output mode\":" 1>&2
		echo -e "\t\t\t\t\t( \"c\" => \"color\" or \"s\" => \"string\" or \"n\" => \"numeric\" or \"h\" => \"html\", default = \"c\" )" 1>&2
		echo -e "\t" 1>&2
		echo -e "\t-f\t\t=>\tis \"output file name\":" 1>&2
		echo -e "\t\t\t\t\t( default = \"${dir_Karaoke}/.lyrics\" )" 1>&2
		echo -e "\t" 1>&2
		echo -e "\t-F\t\t=>\tis \"font name\":" 1>&2
		echo -e "\t\t\t\t\t( default = \"${font}\" )" 1>&2
		echo -e "\t" 1>&2
		echo -e "\t-v\t\t=>\tis \"Volume\":" 1>&2
		echo -e "\t\t\t\t\t( ${min_Volume} to ${max_Volume}, default = \"${default_Volume}\" )" 1>&2
		echo -e "\t" 1>&2
		echo -e "\t-p\t\t=>\tis \"Pitch\":" 1>&2
		echo -e "\t\t\t\t\t( ${min_Pitch} to ${max_Pitch}, default = \"${default_Pitch}\" )" 1>&2
		echo -e "\t" 1>&2
		echo -e "\t-t\t\t=>\tis \"Tempo\":" 1>&2
		echo -e "\t\t\t\t\t( ${min_Tempo} to ${max_Tempo}, default = \"${default_Tempo}\" )" 1>&2
		echo -e "\t" 1>&2
		echo -e "\t-h\t\t=>\tis \"help\":" 1>&2
		echo -e "\t\t\t\t( print this message and exit )" 1>&2
		echo -e "\t" 1>&2
		echo -e "\t-i\t\t=>\tis \"info\":" 1>&2
		echo -e "\t\t\t\t( print song infos and exit )" 1>&2
		echo -e "\t\t\t\t\t( 1|2 arguments: [filename] and <id>-opt.- )" 1>&2
		echo -e "\t\t\t\t\t( if \"id\" is also specified, $(basename "${0}" ) updates db )" 1>&2
		echo -e "\t" 1>&2
		#
	fi
	#
	clean_temp
	exit 1
	#
	}
#
info()
	{
	if [ "${1}" = "--no-time-discovery" ]
		then
		stop_flow="true"
		midifile="${2}"
		id="${3}"
	else
		stop_flow="false"
		midifile="${1}"
		id="${2}"
	fi
	#
	text="M-^?^A"
	lyric="M-^?^E"	
	song="text"
	#
	local testo_raw="$(cat -v "${midifile}" | cat__international_chars )"
	raw_data="$(echo "${testo_raw}" | \
			tr '\\' ' ' | \
			tr '\n' '\\' | gsed s\#'\\'#'^J'#g | \
			gsed s\#"${!song}"#'\nATREASUREINSIDEANDSTRONGOUTSIDEMYPOWERISTHESHELL'#g | \
			gsed -n s\#'ATREASUREINSIDEANDSTRONGOUTSIDEMYPOWERISTHESHELL\(.*\)'#'\1'#p )"
	#
	#
	#Info-standard 1:
	info_standard_1_data="$(echo "${raw_data}" | \
					head -n 3 | \
					cut -d '^' -f 2 | \
					gsed -n s\#'.\* \(.*\)'#'\1'#p )"
	#echo -e "${info_standard_1_data}\n"
	IFS=$'\n'
	array__info_standard_1_data=( ${info_standard_1_data} )
	IFS=$' \t\n'
	#
	Info="" #; echo "(1) \${Info} risulta : \"${Info}\" ..."
	Language="${array__info_standard_1_data[0]}" #; echo "(1) \${Language} risulta : \"${Language}\" ..."
	Title="${array__info_standard_1_data[1]}" #; echo "(1) \${Title} risulta : \"${Title}\" ..."
	Artist="${array__info_standard_1_data[2]}" #; echo "(1) \${Artist} risulta : \"${Artist}\" ..."
	#echo ; echo
	#
	if [ ${#Artist} -eq 0 -o "${#Title}" -eq 0 ]
		then
		#Info-standard 2:
		info_standard_2_data="$(echo "${raw_data}" | \
						head -n 3 | \
						cut -d '^' -f 2 | \
						gsed -n s\#'^.\?@\(.*\)'#'\1'#p ; \
					echo "${raw_data}" | \
						cut -d '^' -f 1,2,3 | \
						(
						IFS=$'\n'
						distingui
						) | \
						gsed -n s\#'^.\?@\(.*\)'#'\1'#p )"
		#
		#@KMIDI KARAOKE FILE
		#@LENGL
		#@Tcari amori miei
		#@Tgianni togni
		#
		Info_char="K"
		Language_char="L"
		Title_char="T"
		Artist_char="T"
		for variable in Info Language Title
			do
			char="${variable}_char"
			#
			####
			########
			echo -e "${info_standard_2_data}" | \
				while read riga
					do
					if [ "${riga:0:1}" = "${!char}" ]
						then
						eval "${variable}=\"${riga:1}\""
						export "${variable}"
						#
						if [ "${variable}" = "Title" ]
							then
							variable="Artist"
							char="${variable}_char"
							continue 1
						elif [ "${variable}" = "Artist" ]
							then
							if [ "${Artist}" = "${Title}" ]
								then
								continue 1
							fi
						else
							continue 2
						fi
						#
					fi
					#
				done
			########
			####
			#
		done
		#
	fi
	#
	#####################################################
	#####################################################
	#####################################################
	#
	if [ "${stop_flow}" = "true" ]
		then
		#
		:
		#
		return 0
	else
		#
		echo "filename=$(basename "${midifile}" )"
		echo "info=${Info}"
		echo "language=${Language}"
		echo "artist=${Artist}"
		echo "title=${Title}"
		#
		:
	fi
	#
	#####################################################
	#####################################################
	#####################################################
	#
	time_string="$(if [ "${mascotte}" = "Tux" ]
				then
				eval timidity -A0 -idqt \"${midifile}\" 2> ${dir_Karaoke}/${timidity_log_file} | \
				while read row 
					do
					if [[ ${row} = "Total playing time:"* ]]
						then
						echo "${row}"
						exit
					fi
				done
				#
			elif [ "${mascotte}" = "Beastie" ]
				then
				eval timidity -A0 -idqt \"${midifile}\" 2> ${dir_Karaoke}/${timidity_log_file} | \
				while read row 
					do
					if [[ ${row} = "Total playing time:"* ]]
						then
						echo "${row}"
						exit
					fi
				done &
				pipe_pid="${!}"
				sleep 4
				#
			fi 
			)"
	#
	duration_string="$(echo "${time_string}" | cut -d ':' -f 2 )"
	#
	minutes=$(echo "${duration_string}" | gsed -n s\#'^.*\([[:digit:]]\+\)[[:blank:]]\+min.*$'#'\1'#p )
	seconds=$(echo "${duration_string}" | gsed -n s\#'^.*[[:blank:]]\+\([[:digit:]]\+\)[[:blank:]]\+s.*$'#'\1'#p )
	#
	if [ ${#minutes} -gt 0 -a ${#seconds} -gt 0 ]
		then
		minutes_duration=$(( ${minutes} * 60 ))
		seconds_duration=${seconds}
		#
		duration=$(( ${minutes_duration} + ${seconds_duration} ))
		#
	elif [ ${#minutes} -gt 0 -a ${#seconds} -eq 0 ]
		then
		minutes_duration=$(( ${minutes} * 60 ))
		:
		#
		duration=${minutes_duration}
		#
	elif [ ${#minutes} -eq 0 -a ${#seconds} -gt 0 ]
		then
		:
		seconds_duration=${seconds}
		#
		duration=${seconds_duration}
		#
	fi
	#
	echo "duration=${duration}"
	#
	#echo "(${time_string} )" 1>&2
	#echo "(${time_string} )" 1> "${dir_tmp}/${file_ignore}"
	echo "(${time_string} )"
	#
	##
	#
	#echo "filename=$(basename "${midifile}" )"
	: midifile
	#echo "info=${Info}"
	: Info
	#echo "language=${Language}"
	: Language
	#echo "artist=${Artist}"
	: Artist
	#echo "title=${Title}"
	: Title
	#echo "duration=${duration}"
	: duration
	#
	if [ ${#id} -gt 0 ]
		then
		#
		:
		# scrivi_riga_nel_database() "id" "path" "title" "artist" "info" "duration" 
		scrivi_riga_nel_database "${id}" "${midifile}" "${Title}" "${Artist}" "${Info}" "${duration}" "true" &
		#
	fi
	#
	}
	
###################
# command line options...
info_mode="false"
quante_opzioni=0
while getopts ":o:f:F:v:t:p:hi" opzione
	do
	quante_opzioni=$((${quante_opzioni} + 1))
	case ${opzione} in
	 "o" )
		if [[ ${OPTARG} =~ [[:alpha:]] ]]; then export output_mode="${OPTARG}" ; \
		else uso ; \
		fi ;;
	 "f" )
		if [[ ${OPTARG} =~ [[:alnum:]]+ ]]; then export output_file="${OPTARG}" ; \
		else uso ; \
		fi ;;
	 "F" )
		if [[ ${OPTARG} =~ [[:alnum:]]+ ]]; then export font="${OPTARG}" ; \
		else uso ; \
		fi ;;
	 "v" )
		if [[ ${OPTARG} =~ [[:digit:]]+ ]]; then export volume=${OPTARG} ; \
		else uso ; \
		fi ;;
	 "t" )
		if [[ ${OPTARG} =~ [[:digit:]]+ ]]; then export tempo=${OPTARG} ; \
		else uso ; \
		fi ;;
	 "p" )
		if [[ ${OPTARG} =~ [[:digit:]]+ ]]; then export pitch=${OPTARG} ; \
		else uso ; \
		fi ;;
	 "h" )
		uso ;;
	 "i" )
		info_mode="true"; info_file="${2}"; info_id="${3}" ;;
	 * )
		uso ;;
	esac
done
shift $((${OPTIND} - 1))
#
[ ${#output_mode} -eq 0 ] && output_mode="c"
export output_mode
#
[ ${#output_file} -eq 0 ] && output_file="${dir_Karaoke}/.lyrics"
export output_file
#
: font
#
[ ${#time_file} -eq 0 ] && time_file="${dir_Karaoke}/.time"
export time_file
#
: pid_file
#
[ ${#volume} -eq 0 ] && volume="${default_Volume}"
export volume
#
[ ${#pitch} -eq 0 ] && pitch="${default_Pitch}"
export pitch
#
[ ${#tempo} -eq 0 ] && tempo="${default_Tempo}"
export tempo
#
[ ${#muted_channels} -eq 0 ] && muted_channels="NONE"
export muted_channels
#
# export extract_way="internal"
export extract_way
: extract_way
#
# export error_correction_chars="0"
export error_correction_chars
: error_correction_chars
#
# export char_encoding="ISO-8859-1"
export char_encoding
: char_encoding
#
# export columns="${default_columns}"
[ ${#columns} -eq 0 ] && columns=${default_columns}; [ ${#default_columns} -eq 0 ] && columns=24
export columns
: columns
#
# export spectrogram_window="false"
export spectrogram_window
: spectrogram_window
#
#
###################
# ...variables
#
if [ $(echo -n "${extract_way_MAIN}" | tr -dc '[[:alnum:]' | wc -c) -gt 0 ]
	then
	extract_way="${extract_way_MAIN}"
fi
: extract_way
if [ $(echo -n "${error_correction_chars_MAIN}" | tr -dc '[[:digit:]' | wc -c) -gt 0 ]
	then
	error_correction_chars="${error_correction_chars_MAIN}"
fi
: error_correction_chars
#
export lyric="${dir_tmp}/lyric.txt"
: lyric
#
export lyric_OK="${dir_tmp}/lyric_OK.txt"
: lyric_OK
#
: columns
export soglia=$(( ${columns} / 3 ))
: soglia
#
if [ ${#soundfont} -gt 0 ]
	then
	export soundfont_string="-x\"soundfont ${soundfont}\""
else
	export soundfont_string=""
fi
: soundfont_string
#
: muted_channels
if [ "${muted_channels}" = "NONE" ]
	then
	channel_exclude_string=""
elif [ "${muted_channels}" = "ALL" ]
	then
	channel_exclude_string="-Q0"
else
	channel_exclude_string="-Q${muted_channels}"
fi
: channel_exclude_string
#
: spectrogram_window
if [ "${spectrogram_window}" = "false" ]
	then
	spectrogram_string=""
elif [ "${spectrogram_window}" = "true" ]
	then
	spectrogram_string="-g0.1"
fi
: spectrogram_string
#
: output_mode
font_family_string="$(echo "${font_family}" | gsed -n s\#'^\(.*\)[[:blank:]]\+[[:digit:]]\+[[:blank:]]*$'#'\1'#p )"
if [ "${output_mode}" = "c" ]
	then
	#
	: foreground_1
	foreground_1_bis=""
	: foreground_2
	foreground_2_bis=""
	#
elif [ "${output_mode}" = "s" ]
	then
	export black_OUT="<span font=\"${font_family_string} 50\" color=\"black\" weight=\"light\">"
	export red_OUT="<span font=\"${font_family_string} 50\" color=\"red\" weight=\"light\">"
	export green_OUT="<span font=\"${font_family_string} 50\" color=\"green\" weight=\"light\">"
	export yellow_OUT="<span font=\"${font_family_string} 50\" color=\"yellow\" weight=\"light\">"
	export blue_OUT="<span font=\"${font_family_string} 50\" color=\"blue\" weight=\"light\">"
	export magenta_OUT="<span font=\"${font_family_string} 50\" color=\"magenta\" weight=\"light\">"
	export cyan_OUT="<span font=\"${font_family_string} 50\" color=\"cyan\" weight=\"light\">"
	export white_OUT="<span font=\"${font_family_string} 50\" color=\"white\" weight=\"light\">"
	#
	: foreground_1
	export foreground_1_bis="</span>"
	: foreground_2
	export foreground_2_bis="</span>"
	#
elif [ "${output_mode}" = "n" ]
	then
	# {0}Testo cantato{2}{1}Testo da cantare{2}
	#
	: foreground_1 # foreground_1 and foreground_2 set after in *CORE...
	export foreground_1_bis="{2}"
	#export foreground_1_bis="S2S"
	: foreground_2 # foreground_1 and foreground_2 set after in *CORE...
	export foreground_2_bis="{2}"
	#export foreground_2_bis="S2S"
	#
elif [ "${output_mode}" = "h" ]
	then
	#
	export intestazione_HTML_old='<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
	        <title>'"${HTML_karaoke_scriptname}"': HTML window vers.'"${EMBEDDED_BROWSER_VERSION}"'...</title>
        
        	<!-- Sezione Script ---------------------------- -->
		<script src="js/jquery.min.js"></script>   
		<script src="js/jquery.textfill.min.js"></script>   
		<script src="js/config.js"></script>
		<!-- ------------------------------------------------ -->
        
		<!-- Sezione CSS ------------------------------- -->
		<style type="text/css" title="currentStyle">
		@import "css/css_karaoke.css";
		</style>
		<!-- ------------------------------------------------ -->
		
		<!-- Sezione refresh della pagina in secondi interi o con decimale (es.: 1.2) -->
		<meta http-equiv="refresh" content="0.2"/> 
		<!-- ------------------------------------------------ -->
	</head>
	<body>
		<div class="textBox" >
			<span>'
	export intestazione_HTML='<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>'"${HTML_karaoke_scriptname}"': HTML window vers.'"${EMBEDDED_BROWSER_VERSION}"'...</title><script src="js/jquery.min.js"></script><script src="js/jquery.textfill.min.js"></script><script src="js/config.js"></script><style type="text/css" title="currentStyle">
@import "css/css_karaoke.css";
</style><meta http-equiv="refresh" content="0.2"/></head><body><div class="textBox" ><span>'
	#
	export foreground_html_0="<font class=\"color_old\">"
	#
	export foreground_html_1="<font class=\"color_sing\">"
	#
	export foreground_html_2="<font class=\"color_next\">"
	#
	export coda_HTML='</span></div></body></html>'
	#
fi
: font_family_string
: foreground_1
: foreground_1_bis
: foreground_2
: foreground_2_bis
#
#
###################
###################
###################
######################################
######################################
######################################
###################
###################
###################
#
# ...main
#
#####
#
clean_temp
if [ ${#} -eq 0 ]
	then
	uso
else
	midi="${1}"
	if [ ! -f "${midi}" ]
		then
		echo -e "\n\n\${midi} is NOT a file... \n\n"
		uso
	else
		if [ ! -r "${midi}" ]
			then
			echo -e "\n\n\${midi} is NOT readable... \n\n"
			uso
		fi
	fi
fi
if_arg_is_an_empty_variable_then_exit "midi"
: midi
#
#
#################################################################################################
#
# INFOS...
if [ "${info_mode}" = "true" ]
	then
	#info "${midi}"
	info "${info_file}" ${info_id}
	clean_temp
	exit 0
fi
#
#################################################################################################
#
# TITLE...
: output_file
#
midi_file_name="$(basename "${midi%.*}" )"
#
####
info --no-time-discovery "${midi}" &> /dev/null
####
#
:<<-'EOTitle'
if [ ${#Artist} -gt 0 -a ${#Title} -gt 0 ]
	then
	#
	if [ "${foreground_1_bis}" = "{2}" -a "${foreground_2_bis}" = "{2}" ]
		then
		# {0}Testo cantato{2}{1}Testo da cantare{2}
		echo "<span font=\"${font_family_string} 20\" weight=\"light\">Now playing

</span><span font=\"${font_family_string} 60\" weight=\"light\">${Title}</span>
<span font=\"${font_family_string} 30\" weight=\"light\">${Artist}</span>"
	else
		echo "<span font=\"${font_family_string} 20\" weight=\"light\">Now playing

</span><span font=\"${font_family_string} 60\" weight=\"light\">${Title}</span>
<span font=\"${font_family_string} 30\" weight=\"light\">${Artist}</span>"
	fi
	#
else
	#
	if [ "${foreground_1_bis}" = "{2}" -a "${foreground_2_bis}" = "{2}" ]
		then
		# {0}Testo cantato{2}{1}Testo da cantare{2}
		echo "<span font=\"${font_family_string} 20\" weight=\"light\">Now playing

</span><span font=\"${font_family_string} 60\" weight=\"light\">${Title}</span>
<span font=\"${font_family_string} 30\" weight=\"light\">${Artist}</span>"
	else
		echo "<span font=\"${font_family_string} 20\" weight=\"light\">Now playing

</span><span font=\"${font_family_string} 60\" weight=\"light\">${midi_file_name}</span>"
	fi
	#
fi 1> "${output_file}"
EOTitle
#
#################################################################################################
#################################################################################################
#
# PlAYING...
#bash -x "${bkcore}" "${midi}" 
"${bkcore}" "${midi}" 
#
#################################################################################################
#
# CLEANING...
clean_temp
#
#################################################################################################
#################################################################################################
