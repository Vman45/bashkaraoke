#!/usr/bin/env bash
#
#########################
#
# Copyright (C) 2013 Vittorio Cagnetta
# Copyright (C) 2013 Davide Depau
#
# Author: Vittorio Cagnetta <vaisarger@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program, 
# called, in this distribution, "bashkaraoke-LICENSE"; if not, write to the 
# Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
#
#########################
#
##################
# ...sourcing 
# only if ${BK_VERSION_NUMBER} is empty...
FORCED_SOURCING="NO"
if [ ${#BK_VERSION_NUMBER} -eq 0 ]
	then
	FORCED_SOURCING="YES"
	start_dir="$(pwd)"
	system_bk_dir_CORE="/usr/share/bashkaraoke/bashkaraoke_FILES"
	if [ -d "${system_bk_dir_CORE}" ]
		then
		dir_CORE="${system_bk_dir_CORE}"
	else
		[ -f "${0}" ] && \
		dir_CORE="$(dirname "${0}" )"
	fi
	#
	[ ! -d "${dir_CORE}" ] && echo -e "\nErr.: var. \"\${dir_CORE}\" is empty...\n\n" && sleep 3 && exit 1
	#
	cd "${dir_CORE}"
		#
		[ ! -f "$(pwd)/bashkaraoke_COMMON" ] && echo -e "\nErr.: file \"$(pwd)/bashkaraoke_COMMON\" doesn't exist...\n\n" && sleep 3 && exit 1
		#
		source "$(pwd)/bashkaraoke_COMMON"
		#
	cd "${start_dir}"
fi
#
###################
# ...variables
#
if [ $(echo -n "${extract_way_MAIN}" | tr -dc '[[:alnum:]' | wc -c) -gt 0 ]
	then
	extract_way="${extract_way_MAIN}"
fi
: extract_way
if [ $(echo -n "${error_correction_chars_MAIN}" | tr -dc '[[:digit:]' | wc -c) -gt 0 ]
	then
	error_correction_chars="${error_correction_chars_MAIN}"
fi
: error_correction_chars
#
export lyric="${dir_tmp}/lyric.txt"
: lyric
#
export lyric_OK="${dir_tmp}/lyric_OK.txt"
: lyric_OK
#
: columns
export soglia=$(( ${columns} / 3 ))
: soglia
#
if [ ${#soundfont} -gt 0 ]
	then
	export soundfont_string="-x\"soundfont ${soundfont}\""
else
	export soundfont_string=""
fi
: soundfont_string
#
: muted_channels
if [ "${muted_channels}" = "NONE" ]
	then
	channel_exclude_string=""
elif [ "${muted_channels}" = "ALL" ]
	then
	channel_exclude_string="-Q0"
else
	channel_exclude_string="-Q${muted_channels}"
fi
: channel_exclude_string
#
: spectrogram_window
if [ "${spectrogram_window}" = "false" ]
	then
	spectrogram_string=""
elif [ "${spectrogram_window}" = "true" ]
	then
	spectrogram_string="-g0.1"
fi
: spectrogram_string
#
export fine_canzone="\n -> THE END^"
export fine_canzone_OUT=""
#
[ ${#black_OUT} -gt 0 ] && black="${black_OUT}"
[ ${#red_OUT} -gt 0 ] && red="${red_OUT}"
[ ${#green_OUT} -gt 0 ] && green="${green_OUT}"
[ ${#yellow_OUT} -gt 0 ] && yellow="${yellow_OUT}"
[ ${#blue_OUT} -gt 0 ] && blue="${blue_OUT}"
[ ${#magenta_OUT} -gt 0 ] && magenta="${magenta_OUT}"
[ ${#cyan_OUT} -gt 0 ] && cyan="${cyan_OUT}"
[ ${#white_OUT} -gt 0 ] && white="${white_OUT}"
if [ "${output_mode}" = "n" ]
	then
	# {0}Testo cantato{2}{1}Testo da cantare{2}
	export foreground_1="foreground_1_OUT"
	export foreground_1_OUT="{0}"
	#
	export foreground_2="foreground_2_OUT"
	export foreground_2_OUT="{1}"
	#
	##
	#
	export fine_canzone=""
	export fine_canzone_OUT="{3}"
	#
elif [ "${output_mode}" = "h" ]
	then
	#
	export foreground_0="foreground_html_0"
	export foreground_0_bis="</font><br>"
	#
	export foreground_1="foreground_html_1"
	export foreground_1_bis="</font>"
	#
	export foreground_2="foreground_html_2"
	export foreground_2_bis="</font><br>"
	#
	export rows="3"
	#
fi
: fine_canzone
#
#
#
###################
# ...functions
# 
#
identify()
	{
	file_to_identify="${1}"
	#
	########################################
	# Check...
	file_to_identify_extension="$(echo ".${file_to_identify##*.}" | tr [[:upper:]] [[:lower:]] )"
	#
	: timidity_extensions_var
	: OTHER_karaoke_type_extensions_var
	while :
		do
		# check if file extension is related with Timidity...
		for karaoke_file_extension in ${timidity_extensions_var}
			do
			[ "${karaoke_file_extension}" = "${file_to_identify_extension}" ] && \
			export FILE_TYPE="MIDI" && break 2
		done
		#
		# check if file extension is related with ???...
		for karaoke_file_extension in ${OTHER_karaoke_type_extensions_var}
			do
			[ "${karaoke_file_extension}" = "${file_to_identify_extension}" ] && \
			export FILE_TYPE="OTHER" && break 2
		done
		#
	done
	########################################
	# Actions PRE-playing...
	if [ "${FILE_TYPE}" = "MIDI" ]
		then
		#
		timidity_command_line_pre="timidity ${soundfont_string} ${channel_exclude_string} ${spectrogram_string} -A${volume} --volume-compensation -T${tempo} -K${pitch} -idqt"
		#export timidity_command_line="$(echo "${timidity_command_line_pre}" | tr -d '"' | tr -s ' ' ) ${file_to_identify}"
		export timidity_command_line="$(echo "${timidity_command_line_pre}" | tr -s ' ' ) ${file_to_identify}"
		#
	elif [ "${FILE_TYPE}" = "OTHER" ]
		then
		:
		#
	else
		echo -e "Err.: File type not supported."
		exit 1
	fi
	########################################
	#
	}
	
backend()
	{
	file_to_play="${1}"
	#
	: pid_file
	:> "${dir_Karaoke}/${pid_file}"
	#
	########################################
	# Play!!!...
	if [ "${FILE_TYPE}" = "MIDI" ]
		then
		#
		( 
			eval "timidity ${soundfont_string} ${channel_exclude_string} ${spectrogram_string} -A${volume} --volume-compensation -T${tempo} -K${pitch} -idqt \"${file_to_play}\"" 2> "${dir_Karaoke}/${timidity_log_file}" | \
			while read row
				do
				if [[ ${row} = "Total playing time:"* ]]
					then
					#
					#echo "${timidity_command_line}" 1> "${dir_Karaoke}/${pid_file}"
					find_pid_py "${timidity_command_line}" 1>> "${dir_Karaoke}/${pid_file}"
					#
					exec cat -
					#
				fi
			done | \
			while read -n1 car_1 
				do
				[ "${car_1}" = ":" ] && read -n1 car_1 || echo "${car_1}" | iconv -f "${char_encoding}"
			done 
		)
		return 0
		#
	elif [ "${FILE_TYPE}" = "OTHER" ]
		then
		#
		(
			:
		)
		return 0
		#
	else
		#
		echo -e "Err.: File type playing not supported."
		exit 1
		#
	fi
	}
#
#
#
write_pid_OBSOLETE() #see "find_pid_py" above...
	{
	pid_file="${pid_file:-/dev/null}"
	: pid_file
	: midi
	: timidity_command_line
	#
	####
	export COLUMNS=1972
	timidity_pid="$(pgrep -f "${timidity_command_line}" )"
	#
	if [ ${#timidity_pid} -eq 0 ]
		then
		#
		############################
		processes="$(ps ax )"
		############################
		#
		timidity_pid="$(echo "${processes}" | gsed -n s\#"^\([[:digit:]]\+\)[[:blank:]].*timidity.*${midi}.*$"#'\1'#p )"
		#
		if [ ${#timidity_pid} -eq 0 ]
			then
			#
			timidity_pid="$(echo "${processes}" | grep "timidity" | fgrep "${midi}"  | cut -d ' ' -f 1 )"
			#
			if [ ${#timidity_pid} -eq 0 ]
				then
				#
				timidity_pid="$(echo "${processes}" | grep "timidity" | fgrep "${midi}"  | cut -d ' ' -f 2 )"
				#
				if [ ${#timidity_pid} -eq 0 ]
					then
					#
					timidity_pid="PID-NOT-FOUND"
					#
				fi
				#
			fi
			#
		fi
		#
	fi
	: timidity_pid
	####
	#
	echo "${timidity_pid}" 1> "${pid_file}"
	#
	}
#
#
#
play()
	{
	: volume
	: pitch
	: tempo
	: muted_channels
	: testo
	: testo_di_controllo
	#
	righe="${1}"
	: righe
	shift
	#
	midi="${1}"
	v_di_w=0
	v_di_w_di_controllo=0
	#
	####################
	#
	if [ "${rows}" = "2" ]
		then
		: righe
		#
	elif [ "${rows}" = "3" ]
		then
		righe="${rows}"
		#
	fi
	[ ${#output_file} -eq 0 ] && : || righe="3"
	: righe
	#
	####################
	#
	IFS=""
	#
	if [ "${output_mode}" = "s" ]
		then
		echo "!?BASH!KARAOKE!?" | tee "${output_file:-/dev/null}"
	fi
	[ ${#output_file} -eq 0 ] && echo -en "${!foreground_2}${testo:0:$(( 3 * ${columns} ))}\r"
	#
	####
	#
	backend "${midi}" | \
	\
	while read -n1 car_2
		do
		case ${righe} in 
			2)
				# this case is used only for *EBG* modes...
				while :
					do
					car_di_controllo="${testo_di_controllo:${v_di_w_di_controllo}:1}"
					if [ "${car_di_controllo}" = "^" ]
						then
						#
						clear_count=$(( ${clear_count} + 1 )) ; [ ${clear_count} -eq 4 ] && clear_count=0 && clear
						#
						###############################
						###############################
						quante_volte=$(( ${v_di_w} / ${columns} ))
						resto=$(( ${v_di_w} % ${columns} ))
						quante_volte_per_columns__pre=$(( $(( ${quante_volte} - 1 ))* ${columns} ))
						quante_volte_per_columns=$(( ${quante_volte} * ${columns} ))
						#
						if [ ${v_di_w} -lt ${columns} ]
							then
							###############################
							#
							echo -en "\e[8;3;${columns}t"
							#
							echo -en "${!foreground_1}${testo:0:${v_di_w}}"
							echo -en "${!foreground_2}${testo:${v_di_w}:$(( $(( ${columns} * 2 )) + $((${columns} - ${v_di_w} )) ))}\r"
							#
							#
							(( v_di_w_di_controllo++ ))
							###############################
						elif [ ${v_di_w} -ge ${columns} -a ${v_di_w} -lt $(( ${columns} * 2 )) ]
							then
							###############################
							#
							echo -en "\e[8;3;${columns}t"
							#
							echo -en "${!foreground_1}${testo:${quante_volte_per_columns__pre}:${columns}}"
							#
							echo -en "${!foreground_1}${testo:${quante_volte_per_columns}:${resto}}"
							echo -en "${!foreground_2}${testo:$((${quante_volte_per_columns} + ${resto})):$(( ${columns} - ${resto} ))}"
							#
							echo -en "${!foreground_2}${testo:$((${quante_volte_per_columns} + ${columns})):$(( ${columns} - 1 ))}\r"
							#
							#
							(( v_di_w_di_controllo++ ))
							###############################
						else
							###############################
							#
							echo -en "\e[8;${righe};${columns}t"
							#
							if [ ${resto} -eq 0 ]
								then
								#
								resto=${columns}
								quante_volte_per_columns=$(( $(( ${quante_volte} - 1 ))* ${columns} ))
								quante_volte_per_columns__pre=$(( $(( ${quante_volte} - 2 ))* ${columns} ))
								#
								#echo -en "${!foreground_1}${testo:${quante_volte_per_columns__pre}:${columns}}"
								#
								echo -en "${!foreground_1}${testo:${quante_volte_per_columns}:${resto}}"
								#
							else
								#
								: resto
								: quante_volte_per_columns
								quante_volte_per_columns__pre=$(( $(( ${quante_volte} - 1 ))* ${columns} ))
								#
								#echo -en "${!foreground_1}${testo:${quante_volte_per_columns__pre}:${columns}}"
								#
								echo -en "${!foreground_1}${testo:${quante_volte_per_columns}:${resto}}" ; echo -en "${!foreground_2}${testo:$((${quante_volte_per_columns} + ${resto})):$(( ${columns} - ${resto} ))}"
							fi
							#
							echo -en "${!foreground_2}${testo:$((${quante_volte_per_columns} + ${columns})):$(( ${columns} - 1 ))}\r"
							#
							#
							(( v_di_w_di_controllo++ ))
							###############################
						fi
						###############################
						###############################
						#
					else
						car_da_indovinare="${testo:${v_di_w}:1}"
						until [[ ${car_da_indovinare} =~ [[:alnum:]] ]]
							do
							[ ${v_di_w} -gt ${#testo} ] && continue 3
							#
							(( v_di_w++ ))
							(( v_di_w_di_controllo++ ))
							continue 2
							#
						done
						#car_da_indovinare="${testo:${v_di_w}:1}"
						case "${car_da_indovinare}" in
							"${car_2}" )
								:
								;;
							[a-z] | [A-Z] | [0-9] )
								[ ${error_correction_chars} -eq 0 ] && continue 2
								#
								e=$(( ${error_correction_chars} + 1 ))
								for (( i=1 ; ; i++ ))
									do
									v_di_w_2=$(( ${v_di_w} + ${i} ))
									car_da_indovinare_2="${testo:${v_di_w_2}:1}"
									if [ "${car_da_indovinare_2}" = "${car_2}" ]
										then
										v_di_w=${v_di_w_2}
										v_di_w_di_controllo=$(( ${v_di_w_di_controllo} + ${i} ))
										break 1
									else
										if [[ ${car_da_indovinare_2} =~ [[:alnum:]] ]]
											then
											[ ${i} -ge ${e} ] && continue 3
										else
											continue 1
										fi
									fi
									#
								done
								;;
							* )
								:
								;;
						esac
						#
					fi
					#
					(( v_di_w++ ))
					(( v_di_w_di_controllo++ ))
					break 1
					#
				done # while :
				#
			;;
			#
			3)
				# this case is used for *GTK* mode (through *OUT) and *EBG* modes in certain rare cases (that is when syllables to sing are too big)...
				while :
					do
					car_di_controllo="${testo_di_controllo:${v_di_w_di_controllo}:1}"
					if [ "${car_di_controllo}" = "^" ]
						then
						#
						###############################
						###############################
						[ ${#output_file} -eq 0 ] && clear
						#
						resto=$(( ${v_di_w} % ${columns} )) 
						quante_volte=$(( ${v_di_w} / ${columns} ))
						quante_volte_per_columns__pre=$(( $(( ${quante_volte} - 1 ))* ${columns} ))
						quante_volte_per_columns=$(( ${quante_volte} * ${columns} ))
						#
						[ ${#output_file} -eq 0 ] && echo -en "\e[8;${righe};${columns}t"
						#
						if [ ${v_di_w} -lt ${columns} ]
							then
							###############################
							{
							[ "${output_mode}" = "h" ] && echo "${intestazione_HTML}"
							#
							#echo -e "${!foreground_1}${testo:${quante_volte_per_columns__pre}:${columns}}"
							echo -en "${!foreground_1}${testo:${quante_volte_per_columns}:${resto}}${foreground_1_bis}"
							echo -e "${!foreground_2}${testo:$((${quante_volte_per_columns} + ${resto})):$(( ${columns} - ${resto} ))}${foreground_2_bis}"
							#
							echo -e "${!foreground_2}${testo:$((${quante_volte_per_columns} + ${columns})):$(( ${columns} - 1 ))}${foreground_2_bis}"
							#
							echo -en "${!foreground_2}${testo:$((${quante_volte_per_columns} + ${columns} + ${columns})):$(( ${columns} - 1 ))}${foreground_2_bis}"
							#
							#
							[ ${#output_file} -eq 0 ] && echo -en "\r" || echo -e "\n"
							#
							[ "${output_mode}" = "h" ] && echo "${coda_HTML}"
							}
							###############################
						else
							###############################
							{
							[ "${output_mode}" = "h" ] && echo "${intestazione_HTML}"
							#
							echo -e "${!foreground_0}${testo:${quante_volte_per_columns__pre}:${columns}}${foreground_0_bis}"
							#
							echo -en "${!foreground_1}${testo:${quante_volte_per_columns}:${resto}}${foreground_1_bis}"
							echo -e "${!foreground_2}${testo:$((${quante_volte_per_columns} + ${resto})):$(( ${columns} - ${resto} ))}${foreground_2_bis}"
							#
							echo -en "${!foreground_2}${testo:$((${quante_volte_per_columns} + ${columns})):$(( ${columns} - 1 ))}${foreground_2_bis}"
							#
							#
							[ ${#output_file} -eq 0 ] && echo -en "\r" || echo -e "\n"
							#
							[ "${output_mode}" = "h" ] && echo "${coda_HTML}"
							}
						fi | tee "${output_file:-/dev/null}"
						#
						(( v_di_w_di_controllo++ ))
						#
						###############################
						###############################
						#
					else
						car_da_indovinare="${testo:${v_di_w}:1}"
						until [[ ${car_da_indovinare} =~ [[:alnum:]] ]]
							do
							[ ${v_di_w} -gt ${#testo} ] && continue 3
							#
							(( v_di_w++ ))
							(( v_di_w_di_controllo++ ))
							continue 2
							#
						done
						car_da_indovinare="${testo:${v_di_w}:1}"
						case "${car_da_indovinare}" in
							"${car_2}" )
								:
								;;
							[a-z] | [A-Z] | [0-9] )
								[ ${error_correction_chars} -eq 0 ] && continue 2
								#
								e=$(( ${error_correction_chars} + 1 ))
								for (( i=1 ; ; i++ ))
									do
									v_di_w_2=$(( ${v_di_w} + ${i} ))
									car_da_indovinare_2="${testo:${v_di_w_2}:1}"
									if [ "${car_da_indovinare_2}" = "${car_2}" ]
										then
										v_di_w=${v_di_w_2}
										v_di_w_di_controllo=$(( ${v_di_w_di_controllo} + ${i} ))
										break 1
									else
										if [[ ${car_da_indovinare_2} =~ [[:alnum:]] ]]
											then
											[ ${i} -ge ${e} ] && continue 3
										else
											continue 1
										fi
									fi
									#
								done
								;;
							* )
								:
								;;
						esac
						#
					fi
					#
					(( v_di_w++ ))
					(( v_di_w_di_controllo++ ))
					break
					#
				done # while :
				#
			;;
		#
		esac # case ${righe} in
		#
	done # while read -n1 car_2
	#done & # while read -n1 car_2
	#
	#pipe_pid="${!}"
	#write_pid
	#wait ${pipe_pid}
	[ "${output_mode}" = "n" ] && echo "${fine_canzone_OUT}" | tee "${output_file:-/dev/null}"
	#
	}
#
#
#
###################
###################
###################
######################################
######################################
######################################
###################
###################
###################
#
# ...main
#
if [ $(echo -n "${volume}" | tr -dc '[:digit:]' | wc -c ) -eq 0 ]
	then
	[ "${l}" = "IT" ] && alert_message "La var \${volume} \n non e' settata \n o non e' corretta..."
	[ "${l}" = "EN" ] && alert_message "Var \${volume} \n is not set \n or is not correct..."
	exit 1
fi
: volume
if [ $(echo -n "${pitch}" | tr -dc '[:digit:]' | wc -c ) -eq 0 ]
	then
	[ "${l}" = "IT" ] && alert_message "La var \${pitch} \n non e' settata \n o non e' corretta..."
	[ "${l}" = "EN" ] && alert_message "Var \${pitch} \n is not set \n or is not correct..."
	exit 1
fi
: pitch
if [ $(echo -n "${tempo}" | tr -dc '[:digit:]' | wc -c ) -eq 0 ]
	then
	[ "${l}" = "IT" ] && alert_message "La var \${tempo} \n non e' settata \n o non e' corretta..."
	[ "${l}" = "EN" ] && alert_message "Var \${tempo} \n is not set \n or is not correct..."
	exit 1
fi
: tempo
if [ $(echo -n "${muted_channels}" | tr -dc '[:alnum:]' | wc -c ) -eq 0 ]
	then
	[ "${l}" = "IT" ] && alert_message "La var \${muted_channels} \n non e' settata \n o non e' corretta..."
	[ "${l}" = "EN" ] && alert_message "Var \${muted_channels} \n is not set \n or is not correct..."
	exit 1
fi
: muted_channels
#
if [ $(echo -n "${extract_way}" | tr -dc '[:alnum:]' | wc -c ) -eq 0 ]
	then
	[ "${l}" = "IT" ] && alert_message "La var \${extract_way} \n non e' settata \n o non e' corretta..."
	[ "${l}" = "EN" ] && alert_message "Var \${extract_way} \n is not set \n or is not correct..."
	exit 1
fi
: extract_way
#
if [ $(echo -n "${error_correction_chars}" | tr -dc '[:digit:]' | wc -c ) -eq 0 ]
	then
	[ "${l}" = "IT" ] && alert_message "La var \${error_correction_chars} \n non e' settata \n o non e' un numero..."
	[ "${l}" = "EN" ] && alert_message "Var \${error_correction_chars} \n is not set \n or is not a number..."
	exit 1
fi
: error_correction_chars
#
if [ $(echo -n "${char_encoding}" | tr -dc '[:alnum:]' | wc -c ) -eq 0 ]
	then
	[ "${l}" = "IT" ] && alert_message "La var \${char_encoding} \n non e' settata \n o non e' corretta..."
	[ "${l}" = "EN" ] && alert_message "Var \${char_encoding} \n is not set \n or is not correct..."
	exit 1
fi
: char_encoding
#
if [ $(echo -n "${columns}" | tr -dc '[:digit:]' | wc -c ) -eq 0 ]
	then
	[ "${l}" = "IT" ] && alert_message "Per favore lancia \n $(basename "${0}" ) \n tramite \n bashkaraoke ..."
	[ "${l}" = "EN" ] && alert_message "Please launch \n $(basename "${0}" ) \n through \n bashkaraoke ..."
	exit 1
fi
: columns
#
fselect_midi="NO"
if [ ${#} -eq 0 ]
	then
	fselect_midi="YES"
else
	midi="${1}"
	if [ ! -f "${midi}" ]
		then
		fselect_midi="YES"
	else
		if [ ! -r "${midi}" ]
			then
			fselect_midi="YES"
		fi
	fi
fi
[ "${fselect_midi}" = "YES" ] && midi="$(fselect)" && if_arg_is_an_empty_variable_then_exit "midi"
: midi
#
######################################################################################################
# IDENTIFICATION...
identify "${midi}"
#
######################################################################################################
# TITLE...
echo -en "$(basename "${midi%.*}") (FILE_TYPE: ${FILE_TYPE})" | iconv -f "${char_encoding}" | sposta_parole "${columns}"
#
# Cleaning...
[ "${FORCED_SOURCING}" = "YES" ] && clean_temp
#
######################################################################################################
#
# Lyric text extraction...
if [ "${FILE_TYPE}" = "MIDI" ]
	then
	#
	case "${extract_way}" in
		"internal" )
			:;;
		"through__midi_text24_pl" )
			:;;
		"through__pykar" )
			:;;
		* )
			[ "${l}" = "IT" ] && alert_message "La var. \"\${extract_way}\" \n non e' corretta..."
			[ "${l}" = "EN" ] && alert_message "Var. \"\${extract_way}\" \n is not correct..."
			exit 1
			;;
	esac && extract__${extract_way} "${midi}"
	#
elif [ "${FILE_TYPE}" = "OTHER" ]
	then
	#
	: # We need "testo" var (and "righe" ) ...
	#
fi
#
######################################################################################################
#
# Playing...
#
# vars "righe" and "testo" come from extract__${extract_way}() function (in case of MIDI) above...
: righe
if [ ${#righe} -eq 0 ]
	then
	[ "${l}" = "IT" ] && alert_message "Attenzione: \n la var.: \"\${righe}\" \n e' vuota..."
	[ "${l}" = "EN" ] && alert_message "Error: \n var.: \"\${righe}\" \n is empty..."
	exit 1
fi
: testo
if [ ${#testo} -eq 0 ]
	then
	[ "${l}" = "IT" ] && alert_message "Attenzione: \n la var.: \"\${testo}\" \n e' vuota..."
	[ "${l}" = "EN" ] && alert_message "Error: \n var.: \"\${testo}\" \n is empty..."
	exit 1
fi
# =>
clear && play ${righe} "${midi}"
#
######################################################################################################


