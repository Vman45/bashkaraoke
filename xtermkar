#!/usr/bin/env bash
#
#########################
#
# Copyright (C) 2013 Vittorio Cagnetta
# Copyright (C) 2013 Davide Depau
#
# Author: Vittorio Cagnetta <vaisarger@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program, 
# called, in this distribution, "bashkaraoke-LICENSE"; if not, write to the 
# Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
#
#########################
#
start_dir="$(pwd)"
system_bk_dir="/usr/local/share/bashkaraoke"
if [ -d "${system_bk_dir}" ]
	then
	dir="${system_bk_dir}"
else
	[ -f "${0}" ] && \
		dir="$(dirname "${0}" )" || \
		dir="$(dirname "$(type -P "${0}" )" )"
fi
cd "${dir}"
	#
	[ ${#BK_VERSION_NUMBER} -eq 0 ] && \
	source "$(pwd)/bashkaraoke_FILES/bashkaraoke_COMMON"
	[ ${#columns} -eq 0 ] && export columns=${colonne} ; [ ${#delimiter} -eq 0 ] && delimiter="______________________________________"
	#
	bkcore="$(pwd)/bashkaraoke_FILES/bashkaraoke_CORE"
	#
cd "${start_dir}"
#
##############
#
: soundfont
if [ -f "${soundfont}" ]
	then
	sf="${soundfont}"
else
	sf="soundfont???"
fi
#
####################################
# Initial section: language...
lang="${LANG}"
if [ ${#lang} -gt 0 ]
	then
	l="$(if [ $(echo -n "${lang}" | grep -i "it" | wc -c) -gt 0 ]
				then
				echo "IT"
			else
				echo "EN"
			fi )"
else
	l="EN"
fi
export l
#
: l
#####################################
#
###################
# Vars and functions...
#
export volume="${default_Volume}"
export pitch="${default_Pitch}"
export tempo="${default_Tempo}"
export muted_channels="NONE"
#
##
#####
##
#
uso()
	{
	if [ "${l}" = "IT" ] 
		then
		echo -e "Uso:>$(basename "${0}" ) <OPZIONI> <MIDI file>(opz.)" 1>&2
		echo -e "\tDove per <OPZIONI> si intende:" 1>&2
		echo -e "\t-c\t\t=>\te' una tolleranza ad errori nei caratteri:" 1>&2
		echo -e "\t\t\t\tpoiche' valori piu' alti aumentano la tolleranza" 1>&2
		echo -e "\t\t\t\tma diminuiscono la precisione di tracciamento," 1>&2
		echo -e "\t\t\t\tvalori ragionevoli sono da 0 a 2" 1>&2
		echo -e "\t\t\t\t-nota: \"-c 0\" causa il blocco di $(basename "${0}" )" 1>&2
		echo -e "\t\t\t\t se trova un errore, ma non e' mai successo-" 1>&2
		echo -e "\t\t\t\t( predefinito: \"0\" )" 1>&2
		echo -e "\t" 1>&2
		echo -e "\t-e\t\t=>\te' il modo di \"estrazione\":" 1>&2
		echo -e "\t\t\t\t\ti = \"interno\" (e' il predefinito)" 1>&2
		echo -e "\t\t\t\t\tm = \"usa midi_text24.pl\"" 1>&2
		echo -e "\t\t\t\t\tp = \"usa pykar\"" 1>&2
		echo -e "\t" 1>&2
		echo -e "\t-h\t\t=>\tsignifica \"help\":" 1>&2
		echo -e "\t\t\t\tscrivi a schermo questo messaggio ed esci" 1>&2
		echo -e "\t" 1>&2
		echo -e "\t-v\t\t=>\tsignifica \"versione\":" 1>&2
		echo -e "\t\t\t\tscrivi a schermo la versione ed esci" 1>&2
		echo -e "\t" 1>&2
		echo -e "\t<MIDI file>\t=>\t( facoltativo )" 1>&2
		#
	elif [ "${l}" = "EN" ] 
		then
		echo -e "Usage:>$(basename "${0}" ) <OPTIONS> <MIDI file>(opt.)" 1>&2
		echo -e "\tWhere <OPTIONS> are:" 1>&2
		echo -e "\t-c\t\t=>\tis a character error correction tolerance:" 1>&2
		echo -e "\t\t\t\tsince higher values increase error tolerance" 1>&2
		echo -e "\t\t\t\tbut decrease tracking precision," 1>&2
		echo -e "\t\t\t\treasonable values are from 0 to 2" 1>&2
		echo -e "\t\t\t\t-note: \"-c 0\" makes $(basename "${0}" ) hang" 1>&2
		echo -e "\t\t\t\t if any error is found, but it never happened-" 1>&2
		echo -e "\t\t\t\t( default: \"0\" )" 1>&2
		echo -e "\t" 1>&2
		echo -e "\t-e\t\t=>\tis \"extraction\" way:" 1>&2
		echo -e "\t\t\t\t\ti = \"internal\" (this is the default)" 1>&2
		echo -e "\t\t\t\t\tm = \"through midi_text24.pl\"" 1>&2
		echo -e "\t\t\t\t\tp = \"through pykar\"" 1>&2
		echo -e "\t" 1>&2
		echo -e "\t-h\t\t=>\tis \"help\":" 1>&2
		echo -e "\t\t\t\tprint this message and exit" 1>&2
		echo -e "\t" 1>&2
		echo -e "\t-v\t\t=>\tis \"version\":" 1>&2
		echo -e "\t\t\t\tprint version and exit" 1>&2
		echo -e "\t" 1>&2
		echo -e "\t<MIDI file>\t=>\t( optional )" 1>&2
		#
	fi
	#
	clean_temp
	exit 1
	#
	}
#
#
#
###################
# command line options...
quante_opzioni=0
while getopts ":c:e:hv" opzione
	do
	quante_opzioni=$((${quante_opzioni} + 1))
	case ${opzione} in
	 "c" )
		if [[ ${OPTARG} =~ [[:digit:]]+ ]]; then export error_correction_chars=${OPTARG} ; export error_correction_chars_MAIN=${OPTARG} ; \
		else uso ; \
		fi ;;
	 "e" )
		if [ "${OPTARG}" = "i" ]; then export extract_way="internal" ; export extract_way_MAIN="internal" ; \
		elif [ "${OPTARG}" = "m" ]; then export extract_way="through__midi_text24_pl" ; export extract_way_MAIN="through__midi_text24_pl" ; \
		elif [ "${OPTARG}" = "p" ]; then export extract_way="through__pykar" ; export extract_way_MAIN="through__pykar" ; \
		else uso ; \
		fi ;;
	 "h" )
		uso ;;
	 "v" )
		echo "${0}: vers. ${BK_VERSION_NUMBER}" 1>&2 ; \
		exit 0 ;;
	 * )
		uso ;;
	esac
done
shift $((${OPTIND} - 1))
#
fselect_midi="NO"
if [ ${#} -eq 0 ]
	then
	fselect_midi="YES"
else
	midi="$(echo "${1}" | gsed s\#"^~"#"${HOME}"# )"
	#
	#####################################
	if [ ! -f "${midi}" ]
		then
		IFS=$'\n'
		array_path_canzone=( $(echo "${midi}" | tr -c '[a-z][A-Z][:digit:][:punct:][:blank:]' '\n' ) )
		IFS=$' \t\n'
		#
		##
		####
		path_canzone_pre="$(for (( index=0 ; index < ${#array_path_canzone[@]} ; index++ ))
						do
						echo -n "\"${array_path_canzone[${index}]}\"?"
					done | \
					gsed s\#'[[:space:]]\+'#'"*"'#g | \
					gsed -n s\#'\(.*\)?$'#'\1'#p 
					)"
		#path_canzone="$(echo "${path_canzone_pre}" | gsed s\#'^"~'#"\"${HOME}"# )"
		path_canzone="$(echo "${path_canzone_pre}" | gsed s\#'^.~'#".${HOME}"# )"
		####
		##
		#
		risultato_ls=$(eval ls "${path_canzone}" 2>/dev/null | wc -l )
		if [ ${risultato_ls} -eq 0 ]
			then
			[ "${l}" = "IT" ] && alert_message "Non sono riuscito \n ad associare un path \n alla var.: \n \"\${path_canzone}\" \n ($(basename "${path_canzone}" )) \n..."
			[ "${l}" = "EN" ] && alert_message "I couldn't \n refer a path \n to var.:\n \"\${path_canzone}\" \n ($(basename "${path_canzone}" )) \n..."
			#
			fselect_midi="YES"
			#
		elif [ ${risultato_ls} -eq 1 ]
			then
			#
			midi="$(eval ls "${path_canzone}" )"
			#
		fi # if [ ${risultato_ls} -eq 0 ]
		#
	fi # if [ ! -f "${midi}" ]
	#
fi # if [ ${#} -eq 0 ]
#
if [ "${fselect_midi}" = "YES" ]
	then
	[ "${l}" = "IT" ] && message "Per favore, \n seleziona \n il file midi..."
	[ "${l}" = "EN" ] && message "Please, \n select \n midi file..."
	fselect ; midi="$(0< "${dir_tmp}/${file_tmp}" )" ; if_arg_is_an_empty_variable_then_exit "midi"
fi
basename_midi="$(basename "${midi}" )"
cd "$(dirname "${midi}" )"
	dir_midi="$(pwd)"
	export midi="${dir_midi}/${basename_midi}"
cd - 1>/dev/null
: midi
: dir_midi
: basename_midi
#
#
#
###################
# ...main
#
#
#
clean_temp
#
#
xterm_error="$(xterm -version 2>&1 )"
if [ $(echo -n "${xterm_error}" | grep "Can't open display" | wc -c ) -gt 0 ]
	then
	# ...X is NOT running...
	[ "${l}" = "IT" ] && alert_message "$(basename "${0}" ) needs \n xterm ( in X windows ) \n in order to work... \n\n Sorry."
	[ "${l}" = "EN" ] && alert_message "$(basename "${0}" ) ha bisogno \n di xterm ( in X windows ) \n per funzionare... \n\n Mi dispiace."
	sleep 1
	exit 1
	#
else
	if [ "${mode}" = "dialog" ]
		then
		[ "${l}" = "IT" ] && alert_message "Al momento, \n la finestra dei \"Livelli\" \n non funziona \n nel modo \"dialog\"... \n mi dispiace :("
		[ "${l}" = "EN" ] && alert_message "Currently, \n \"Levels\" window \n is not working \n in \"dialog\" mode... \n sorry :("
		levels_window="false"
	fi
	#
	##
	#
	export parent_bkscript="$(basename "${0}" )"
	#
	##
	#
	if [ "${levels_window}" = "true" -a "${channels_window}" = "false" ]
		then
		go_bk__levels
		#
	elif [ "${levels_window}" = "false" -a "${channels_window}" = "true" ]
		then
		go_bk__channels
		#
	elif [ "${levels_window}" = "true" -a "${channels_window}" = "true" ]
		then
		go_bk__levels_channels
		#
	elif [ "${levels_window}" = "false" -a "${channels_window}" = "false" ]
		then
		go_bk
		#
	else
		[ "${l}" = "IT" ] && alert_message "Le variabili \n \${levels} \n e \n \${channels} \n non sono settate \n o non sono corrette... \n\n Per favore, \n controlla il file: \n \"${rc_file}\" \n in \n \"${dir_Karaoke}\" \n ..."
		[ "${l}" = "EN" ] && alert_message "Vars \n \${levels} \n and \n \${channels} \n are not set \n or are not correct... \n\n Please, check file: \n \"${rc_file}\" \n in \n \"${dir_Karaoke}\" \n ..."
		#
		exit 1
		#
	fi
	#
	##
	#
	unset parent_bkscript
	#
	##
	#
fi
#
####
##
#




