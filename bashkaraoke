#!/usr/bin/env bash
#
#########################
#
# Copyright (C) 2011 Vittorio Cagnetta
# Copyright (C) 2011 Davide Depau
#
# Author: Vittorio Cagnetta <vaisarger@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program, 
# called, in this distribution, "bashkaraoke-LICENSE"; if not, write to the 
# Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
#
#########################
#
####################################
# Initialising...
#
start_dir="$(pwd)"
	system_bk_dir="/usr/local/share/bashkaraoke"
	if [ -d "${system_bk_dir}" ]
		then
		dir="${system_bk_dir}"
	else
		[ -f "${0}" ] && \
			dir="$(dirname "${0}" )" || \
			dir="$(dirname "$(type -P "${0}" )" )"
	fi
	cd "${dir}"
	#
	##
	export bk_COMMON="$(pwd)/bashkaraoke_FILES/bashkaraoke_COMMON"
	source "${bk_COMMON}"
	[ ${#columns} -eq 0 ] && columns=${colonne} ; [ ${#delimiter} -eq 0 ] && delimiter="______________________________________"
	##
	#
	export bk_name="bashkar" ; export bk="$(type -P "${bk_name}" )" ; \
						[ -f "${bk}" ] && : || bk="$(pwd)/${bk_name}"
						[ -f "${bk}" ] && : || { alert_message "ERR.: \n NO ${bk_name} !" ; exit 1 ; }
	export bk_extractor_name="bk-extractor"; export bk_extractor="$(type -P "${bk_extractor_name}" )" ; \
						[ -e "${bk_extractor}" ] && : || bk_extractor="$(pwd)/${bk_extractor_name}"
						[ -e "${bk_extractor}" ] && : || { alert_message "ERR.: \n NO ${bk_extractor_name} !" ; exit 1 ; }
	export bk_OUT_name="bashkaraoke_OUT"; export bk_OUT="$(type -P "${bk_OUT_name}" )" ; \
						[ -f "${bk_OUT}" ] && : || bk_OUT="$(pwd)/bashkaraoke_FILES/${bk_OUT_name}"
						[ -f "${bk_OUT}" ] && : || { alert_message "ERR.: \n NO ${bk_OUT_name} !" ; exit 1 ; }
	#
cd "${start_dir}"
#
#
###################
# ...vars
#
#
if [ ${#soundfont} -gt 0 ]
	then
	export soundfont_string="-x\"soundfont ${soundfont}\""
else
	export soundfont_string=""
fi
: soundfont_string
#
#
#
######################
# and functions...
#
#
uso()
	{
	if [ "${l}" = "IT" ] 
		then
		echo -e "Uso:>$(basename "${0}" ) <OPZIONI> <MIDI file>(opz.)" 1>&2
		echo -e "\tDove per <OPZIONI> si intende:" 1>&2
		echo -e "\t-h\t\t=>\tsignifica \"help\":" 1>&2
		echo -e "\t\t\t\tscrivi a schermo questo messaggio ed esci" 1>&2
		echo -e "\t" 1>&2
		echo -e "\t-v\t\t=>\tsignifica \"versione\":" 1>&2
		echo -e "\t\t\t\tscrivi a schermo la versione ed esci" 1>&2
		echo -e "\t" 1>&2
		echo -e "\t<MIDI file>\t=>\t( facoltativo )" 1>&2
		echo -e "\t" 1>&2
		echo -e "\t( Normalmente lanci questo " 1>&2
		echo -e "\t programma _senza_ argomenti. )" 1>&2
		echo -e "\n" 1>&2
		#
	elif [ "${l}" = "EN" ] 
		then
		echo -e "Usage:>$(basename "${0}" ) <OPTIONS> <MIDI file>(opt.)" 1>&2
		echo -e "\tWhere <OPTIONS> are:" 1>&2
		echo -e "\t-h\t\t=>\tis \"help\":" 1>&2
		echo -e "\t\t\t\tprint this message and exit" 1>&2
		echo -e "\t" 1>&2
		echo -e "\t-v\t\t=>\tis \"version\":" 1>&2
		echo -e "\t\t\t\tprint version and exit" 1>&2
		echo -e "\t" 1>&2
		echo -e "\t<MIDI file>\t=>\t( optional )" 1>&2
		echo -e "\t" 1>&2
		echo -e "\t( Normally you launch this " 1>&2
		echo -e "\t program _without_ arguments. )" 1>&2
		echo -e "\n" 1>&2
		#
	fi
	#
	clean_temp
	exit 1
	#
	}
#
#
#
###################
###################
#
#
###################
######################################
######################################
###################
#
#
###################
###################
# ...pre main
#
quante_opzioni=0
while getopts ":hv" opzione
	do
	quante_opzioni=$((${quante_opzioni} + 1))
	case ${opzione} in
	 "h" )
		uso ;;
	 "v" )
		echo -e "${0}: vers. ${BK_VERSION_NUMBER}\n${LIB_NAME}: vers. ${LIB_VERSION}" 1>&2 ; \
		exit 0 ;;
	 * )
		uso ;;
	esac
done
shift $((${OPTIND} - 1))
#
if [ ${#} -ge 1 ]
	then
	midi="${1}"
	basename_midi="$(basename "${midi}" )"
	cd "$(dirname "${midi}" )"
		dir_midi="$(pwd)"
		midi="${dir_midi}/${basename_midi}"
	cd - 1>/dev/null
fi
if [ ! -f "${midi}" ]
	then
	unset midi
else
	if [ ! -r "${midi}" ]
		then
		unset midi
	fi
fi
#
######################################
######################################
###################
###################
# ... gtk (fullscreen python powered) mode -default-
[ "${use_gtk}" = "true" ] && \
	{
	#
	bashkaraoke-gtk
	clean_temp && exit 0
	#
	}
#
##########
######################
exec 2> "${dir_Karaoke}/${log_file}"
######################
##########
# ...gsw (gtkdialog-single-window ) mode
#
[ "${use_gsw}" = "true" ] && \
	{
	#
	#[ -f "${database}" ] && var_database="$(cat "${database}" )" && export database
	[ -f "${database}" ] && var_database="$(gsed -n s\#'^.*path="""\(.*\)""", title=.*$'#'\1'#p 0< "${database}"  )" && export database
	export extensions="${extensions_var}"
	#export info_file="${dir_tmp}/${file_ignore}"
	export info_file="${dir_Karaoke}/.info"
		echo "" 1> "${dir_Karaoke}/lista_karaoke.txt"
	export dummy_file="${dir_tmp}/${file_tmp}"
		[ "${l}" = "IT" ] && echo "Artista/Canzone - es. m?dugno/nel?blu" 1> "${dummy_file}"
		[ "${l}" = "EN" ] && echo "Artist/Song - e.g. beatl?s/com?gether" 1> "${dummy_file}"
	: ${dir_Karaoke}/lista_karaoke.txt
		echo "" 1> "${dir_Karaoke}/lista_karaoke.txt"
	#
	export BASHKARAOKE_DIALOG="$(outputta_bkXgtkdialog )"
	gtkdialog --program="BASHKARAOKE_DIALOG" | \
						while read row
							do
							#
							## This is the scheme: BASHKARAOKE_DIALOG -> GSW_SEARCH_DIALOG -> ***_this_ loop*** -> GSW_LIST_DIALOG
							#
							data="$(echo "${row}" | gsed -n s\#'^ATREASUREINSIDEANDSTRONGOUTSIDEMYPOWERISTHESHELL=\(.*\)$'#'\1'#p )"
							#
							#########################################
							[ ${#data} -eq 0 ] && continue 1
							#
							artist_title="$(echo "${data}" | tr -c '[[:alnum:]]' '?' | gsed s\#'\?'#'\.\*'#g )"
							song_list="$(echo "${var_database}" | gsed -n "\#${artist_title}#Ip" )"
							echo "${song_list}" 1> "${dir_Karaoke}/lista_karaoke.txt"
							#########################################
							#
						done
	#
	clean_temp && exit 0
	}
#
###################
###################
# ... buc mode
[ "${use_buc}" = "true" ] && \
	{
	#
	outputta_bkXbuc 1> "${dir_tmp}/${file_tmp}"
	buc "${dir_tmp}/${file_tmp}"
	clean_temp && exit 0
	#
	}
#
###################
###################
# ... EBG mode
#
# ...database
if [ -f "${database}" ]
	then
	[ "${l}" = "IT" ] && wait_for "$(basename "${0}" ) \n v.${BK_VERSION_NUMBER} \n\n basata su \n ${LIB_NAME} \n v.${LIB_VERSION}"
	[ "${l}" = "EN" ] && wait_for "$(basename "${0}" ) \n v.${BK_VERSION_NUMBER} \n\n based on \n ${LIB_NAME} \n v.${LIB_VERSION}"
	#var_database="$(cat "${database}" )" ; sleep 1
	#var_database="$(gsed -n s\#'^.*path="""\(.*\)""", title=.*$'#'\1'#p 0< "${database}" )" ; sleep 1
	var_database="$(gsed -n s\#'^.*path=\(.*\)\ttitle=.*$'#'\1'#p 0< "${database}" )" ; sleep 1
	#
	xscreensaver-command -exit
	terminate_wait_for
	#
else
	#
	xscreensaver-command -exit
	:
	#
fi
#
###################
###################
# ...main
#
while :
	do
	#
	unset lista
	#
	#######################
	#
	if [ ${#midi} -eq 0 ]
		then
		#
		# Main menu ( if there isn't ${1} )...  
		[ "${l}" = "IT" ] && menu \
					"RICERCA il midi nel database..." \
					"AGGIORNA il database..." \
					"${delimiter}" \
					"SELEZIONA il midi direttamente nel filesystem..." \
					"${delimiter}" \
					"CONFIGURA $(basename "${0}" )..." \
					"${delimiter}" \
					"ESCI->" \
					"INFORMAZIONI..."
		[ "${l}" = "EN" ] && menu \
					"SEARCH midi in database..." \
					"UPDATE database..." \
					"${delimiter}" \
					"SELECT midi directly in filesystem..." \
					"${delimiter}" \
					"CONFIGURE $(basename "${0}" )..." \
					"${delimiter}" \
					"EXIT->" \
					"ABOUT..."

		scelta="$(0< "${dir_tmp}/${file_tmp}" )" ; clean_temp ; if_arg_is_an_empty_variable_then_exit "scelta"
		#
		if [ "${scelta}" = "RICERCA il midi nel database..." -o "${scelta}" = "SEARCH midi in database..." ]
			then
			#
			midi="$(estrai_dal_database )" ; [ ${#midi} -eq 0 ] && continue 1
			: midi
			#
		elif [ "${scelta}" = "SELEZIONA il midi direttamente nel filesystem..." -o "${scelta}" = "SELECT midi directly in filesystem..." ]
			then
			fselect ; midi="$(0< "${dir_tmp}/${file_tmp}" )" ; clean_temp ; [ ${#midi} -eq 0 ] && continue 1
			: midi
			#
		elif [ "${scelta}" = "AGGIORNA il database..." -o "${scelta}" = "UPDATE database..." ]
			then
			#
			crea_database
			#
			continue 1
			#
		elif [ "${scelta}" = "CONFIGURA $(basename "${0}" )..." -o "${scelta}" = "CONFIGURE $(basename "${0}" )..." ]
			then
			modifica_rc
			: soundfont_string
			#
			clean_temp
			continue 1
			#
		elif [ "${scelta}" = "${delimiter}" ]
			then
			#
			continue 1
			#
		elif [ "${scelta}" = "INFORMAZIONI..." -o "${scelta}" = "ABOUT..." ]
			then
			#
			[ "${l}" = "IT" ] && ok_message "$(basename "${0}" ) v.${BK_VERSION_NUMBER} \n\n Un programma karaoke \n aperto e gratuito \n basato su \n Timidity \n e \n ${LIB_NAME}/Python \n\n\n\n Autori: \n Vittorio Cagnetta (Bash backend) \n Davide Depau (interfaccia Python gtk, video intro) \n Stephen Smally (interfaccia Python gtk, pacchettizzazione)"
			[ "${l}" = "EN" ] && ok_message "$(basename "${0}" ) v.${BK_VERSION_NUMBER} \n\n A free karaoke player \n based on \n Timidity \n and \n ${LIB_NAME}/Python \n\n\n\n Authors: \n Vittorio Cagnetta (Bash backend) \n Davide Depau (Python gtk interface, video intro) \n Stephen Smally (Python gtk interface, packaging)"
			continue 1
			#
		elif [ "${scelta}" = "ESCI->" -o "${scelta}" = "EXIT->" ]
			then
			#
			clean_temp
			exit 0
			#
		else
			#
			ciao
			#
		fi # if [ "${scelta}" = "RICERCA il midi nel database..." -o "${scelta}" = "SEARCH midi in database..." ]
		#
	else
		# Midi to play there's already, go ahed...
		: midi
		#
	fi #if [ ${#midi} -eq 0 ]
	#
	: midi
	#
	#######################
	# Choosing player...
	primo_loop="SI"
	while :
		do
		#
		if [ "${primo_loop}" = "SI" ]
			then
			primo_loop="NO"
		else
			#
			if [ ${#lista} -eq 0 ]
				then
				[ "${l}" = "IT" ] && wait_for "Creazione della lista \n in corso..."
				[ "${l}" = "EN" ] && wait_for "List creating..."
				lista="$(0< "${dir_Karaoke}/${lista_karaoke}" )"
				IFS=$'\n' ; array_lista=( ${lista} ) ; IFS=$' \t\n'	
				scelte="$(for (( index=0 ; index < ${#array_lista[@]} ; index++ )); do echo -ne "\"$(echo "${array_lista[${index}]}" | tr -c '[a-z][A-Z][:digit:][:punct:][:blank:][:space:]' '?' )\"\t" ; done )"
				sleep 1
				terminate_wait_for
				#
				: array_lista[@]
				: scelte
				#
			fi
			#
		fi
		#
		[ "${l}" = "IT" ] && menu \
				"$(basename "${bk}" ) ->" \
				"$(if [ $(echo -n "$(type "pykar" 2>/dev/null)" | wc -c) -gt 0 ]; then echo "pykar ->"; fi )" \
				"$(if [ $(echo -n "$(type "playmidi" 2>/dev/null)" | wc -c) -gt 0 ]; then echo "playmidi ->"; fi )" \
				"timidity ->" \
				"${delimiter}" \
				"=> estrai il testo della canzone" \
				"=> estrai le informazioni del midi" \
				"${delimiter}" \
				"$(if [ ${#array_lista[@]} -gt 1 ]; then echo "<-TORNA ALLA LISTA PRECEDENTE"; fi )" \
				"<-MENU PRINCIPALE"
		[ "${l}" = "EN" ] && menu \
				"$(basename "${bk}" ) ->" \
				"$(if [ $(echo -n "$(type "pykar" 2>/dev/null)" | wc -c) -gt 0 ]; then echo "pykar ->"; fi )" \
				"$(if [ $(echo -n "$(type "playmidi" 2>/dev/null)" | wc -c) -gt 0 ]; then echo "playmidi ->"; fi )" \
				"timidity ->" \
				"${delimiter}" \
				"=> extract song lyric" \
				"=> extract midi info" \
				"${delimiter}" \
				"$(if [ ${#array_lista[@]} -gt 1 ]; then echo "<-BACK TO PREVIOUS LIST"; fi )" \
				"<-MAIN MENU"
		scelta="$(0< "${dir_tmp}/${file_tmp}" )" ; clean_temp ; if_arg_is_an_empty_variable_then_exit "scelta"
		#
		#############
		# Playing...
		#
		midi="$(echo "${midi}" | gsed s\#"^~"#"${HOME}"# )"
		#
		if [ "${scelta}" = "$(basename "${bk}" ) ->" ]
			then
			#
			:
			#
			##
			####
			"${bk}" "${midi}"
			####
			##
			#
		elif [ "${scelta}" = "pykar ->" ]
			then
			#
			wait_seconds 1 &
			pykar_height_1=199
			pykar_height_2=324
			#
			##
			####
			pykar --width="1236" --height="${pykar_height_1}" --font-scale="3" --title="pykar: $(basename "${midi}" | \
									iconv -f "${char_encoding}" )" "${midi}" 2>/dev/null
			####
			##
			#
			if [ ${?} -ne 0 ]
				then
				[ "${l}" = "IT" ] && alert_message "Attenzione:\npykar ha avuto un problema..."
				[ "${l}" = "EN" ] && alert_message "Error:\npykar had a problem..."
			fi
		elif [ "${scelta}" = "playmidi ->" ]
			then
			#
			[ "${l}" = "IT" ] && wait_for "Esecuzione di \n $(basename "${midi}" ) \n in corso..."
			[ "${l}" = "EN" ] && wait_for "Playing \n $(basename "${midi}" ) \n..."
			sleep 1
			#
			##
			####
			xterm -cr "${background}" -uc -title "$(basename "${0}"): $(basename "${midi}" | \
				iconv -f "${char_encoding}" )" -bg "${background}" -fg "${foreground_2}" -fn "${font}" -geometry ${columns}x2+20+400 -e playmidi "${midi}"
			####
			##
			#
			terminate_wait_for
		elif [ "${scelta}" = "timidity ->" ]
			then
			#
			:
			#
			##
			####
			eval timidity ${soundfont_string} -A 105 --volume-compensation -iat \"${midi}\"
			if [ ${?} -eq 1 ]
				then
				[ "${l}" = "IT" ] && wait_for "Esecuzione di \n $(basename "${midi}" ) \n in corso..."
				[ "${l}" = "EN" ] && wait_for "Playing \n $(basename "${midi}" ) \n..."
				sleep 1
				#
				##
				####
				xterm -cr "${background}" -uc -title "$(basename "${0}"): $(basename "${midi}" | iconv -f "${char_encoding}" )" -bg "${background}" -fg "${foreground_2}" -fn "${font}" -geometry ${columns}x2+20+400 -e timidity -idt "${midi}"
				####
				##
				#
				terminate_wait_for
			fi
			####
			##
			#
		elif [ "${scelta}" = "${delimiter}" ]
			then
			#
			continue 1
			#
		elif [ "${scelta}" = "=> estrai il testo della canzone" -o "${scelta}" = "=> extract song lyric" ]
			then
			#
			##
			####
			extract_song_lyric "${midi}"
			####
			##
			#
			continue 1
			#
		elif [ "${scelta}" = "=> estrai le informazioni del midi" -o "${scelta}" = "=> extract midi info" ]
			then
			#
			[ "${l}" = "IT" ] && wait_for "Attendere prego..."
			[ "${l}" = "EN" ] && wait_for "Please wait..."
			info_midi="$("${bk_OUT}" -i "${midi}" 2> /dev/null )"
			terminate_wait_for
			ok_message "${info_midi}"
			#
			continue 1
			#
		elif [ "${scelta}" = "<-TORNA ALLA LISTA PRECEDENTE" -o "${scelta}" = "<-BACK TO PREVIOUS LIST" ]
			then
			#
			: scelte
			IFS=$'\t' ; eval menu ${scelte} ; IFS=$' \t\n'
			scelta="$(0< "${dir_tmp}/${file_tmp}" )" ; [ ${#scelta} -eq 0 ] && unset midi && continue 2
			#
			midi="${scelta}"
			#
			#clean_temp
			continue 1
			#
		elif [ "${scelta}" = "<-MENU PRINCIPALE" -o "${scelta}" = "<-MAIN MENU" ]
			then
			#
			unset midi
			continue 2
			#
		else
			#
			ciao
			#
		fi
		#
		##
		#
	done
	#
	clean_temp
	#
done
#
clean_temp && rm "${dir_Karaoke}/${lista_karaoke}"
#
#/usr/local/bin/xscreensaver  # This is to restart your xscreensaver...
#
